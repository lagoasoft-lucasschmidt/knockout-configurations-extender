var _, ko, pathval;

ko = require('knockout');

_ = require('lodash');

pathval = require('pathval');

ko.extenders.configurations = function(target, configurations) {
  configurations = configurations || {};
  configurations = ko.observable(ko.mapping.fromJS(configurations));
  target.getConfig = function(name) {
    return ko.computed(function() {
      var conf;
      conf = ko.mapping.toJS(configurations);
      return pathval.get(conf, name);
    });
  };
  target.hasConfig = function(name) {
    return ko.computed(function() {
      return ko.unwrap(target.getConfig(name)) != null;
    });
  };
  target.isConfig = function(name) {
    return ko.computed(function() {
      return !!ko.unwrap(target.getConfig(name));
    });
  };
  target.isntConfig = function(name) {
    return ko.computed(function() {
      return !ko.unwrap(target.getConfig(name));
    });
  };
  target.setConfig = function(name, val) {
    var conf;
    conf = ko.mapping.toJS(configurations);
    pathval.set(conf, name, val);
    configurations(ko.mapping.fromJS(conf));
    return target;
  };
  target.toggleConfig = function(name) {
    var conf;
    conf = ko.mapping.toJS(configurations);
    pathval.set(conf, name, !ko.unwrap(target.getConfig(name)));
    configurations(ko.mapping.fromJS(conf));
    return target;
  };
  target.getConfigs = function() {
    return ko.mapping.toJS(configurations);
  };
  target.setConfigs = function(configs) {
    configurations(ko.mapping.fromJS(configs));
    return target;
  };
  return target;
};

// ---
// generated by coffee-script 1.9.2
